import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_template/core/widget/water_loading.dart';
import 'package:flutter_template/pages/topo/model/equipment_datas.dart';
import 'package:flutter_template/pages/topo/model/offline_list_bean.dart';
import 'package:get/get.dart';
import '../../../config/base_config.dart';
import '../../../core/http/http_app.dart';
import '../../../core/utils/shared_preferences_util.dart';

//接入设备
class ConnectedDevice extends StatefulWidget {
  const ConnectedDevice({Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _ConnectedDeviceState();
}

String sn = '';
bool isOnline = true;
List deviceList = []; //设备列表
List<Data> offDeviceList = []; //设备列表
EquipmentDatas topoData = EquipmentDatas(onlineDeviceTable: [], max: null);
EquipmentDatas OfflineData = EquipmentDatas(onlineDeviceTable: [], max: null);

class _ConnectedDeviceState extends State<ConnectedDevice>
    with SingleTickerProviderStateMixin, AutomaticKeepAliveClientMixin {
  late TabController _tabController;
  bool loading = false;
  //获取列表
  Future getDeviceListFn() async {
    var res = await sharedGetData('deviceSn', String);
    setState(() {
      loading = true;
      sn = res.toString();
    });
    var response = await App.post(
        '${BaseConfig.cloudBaseUrl}/cpeMqtt/getDevicesTable',
        data: {'sn': sn, "type": "getDevicesTable"});
    setState(() {
      loading = false;
    });
    var d = json.decode(response.toString());
    setState(() {
      List<OnlineDeviceTable>? onlineDeviceTable = [];
      int id = 0;

      d['data']['wifiDevices'].addAll(d['data']['lanDevices']);
      if ((d['data']['wifiDevices'] as List).isNotEmpty) {
        deviceList = d['data']['wifiDevices'];
        for (var item in deviceList) {
        OnlineDeviceTable device = OnlineDeviceTable.fromJson({
          'id': id,
          'LeaseTime': '1',
          'Type': item['connection'] ?? 'LAN',
          'HostName': item['name'],
          'IP': item['IPAddress'],
          'MAC': item['MACAddress'] ?? item['MacAddress']
        });
        onlineDeviceTable.add(device);
        id++;
      }
      topoData = EquipmentDatas(onlineDeviceTable: onlineDeviceTable, max: 255);
      }
      
    });
  }

  //获取离线列表
  getOffLineListFn() async {
    // List<Autogenerated>  offDeviceList=[];
    var res = await sharedGetData('deviceSn', String);
    setState(() {
      loading = true;
      sn = res.toString();
    });
    var response = await App.post(
        '${BaseConfig.cloudBaseUrl}/cpeMqtt/getOffLineDevicesTable',
        data: {'sn': sn});
    setState(() {
      loading = false;
    });

    final offlineBean = OfflineListBean.fromJson(jsonDecode(response));

    if (offlineBean.code == 200 && offlineBean.data != null) {
      if (offlineBean.data!.isNotEmpty) {
        List<OnlineDeviceTable>? offlineDeviceTable = [];
        int id = 0;
        setState(() {
          offDeviceList = offlineBean.data!;
          for (var item in offDeviceList) {
            OnlineDeviceTable device = OnlineDeviceTable.fromJson({
              'id': id,
              'LeaseTime': item.leaseTime ?? "",
              'Type': item.connection ?? 'LAN',
              'HostName': item.name ?? "",
              'IP': item.ipaddress ?? "",
              'MAC': item.macaddress ?? ""
            });
            offlineDeviceTable.add(device);
            id++;
          }
          OfflineData =
              EquipmentDatas(onlineDeviceTable: offlineDeviceTable, max: 255);
        });
      }
    }
    // setState(() {
    //   d.forEach((item) => {offDeviceList.add(Autogenerated.fromJson(item))});
    // });
  }

  @override
  void initState() {
    super.initState();
    getDeviceListFn();
    // getOffLineListFn();
    _tabController = TabController(length: 2, vsync: this);
  }

  @override
  bool get wantKeepAlive => true;

  @override
  Widget build(BuildContext context) {
    super.build(context);
    return Scaffold(
      appBar: AppBar(
        backgroundColor: const Color.fromARGB(255, 255, 255, 255),
        elevation: 0,
        title: Text(
          'Devices(${deviceList.length + offDeviceList.length})',
          style: const TextStyle(color: Colors.black),
        ),
        // backgroundColor: Colors.white,
        centerTitle: true,
        systemOverlayStyle: const SystemUiOverlayStyle(
          //设置状态栏的背景颜色
          statusBarColor: Colors.transparent,
          //状态栏的文字的颜色
          statusBarIconBrightness: Brightness.dark,
        ),
        leading: IconButton(
            onPressed: () {
              Get.back();
            },
            icon: const Icon(
              Icons.arrow_back_ios,
              color: Colors.black,
            )),
        bottom: TabBar(
          controller: _tabController,
          indicatorWeight: 2,
          indicatorSize: TabBarIndicatorSize.label,
          indicatorColor: Colors.blue,
          unselectedLabelColor: Colors.black,
          labelColor: Colors.blue,
          tabs: [
            Tab(text: 'Online(${deviceList.length.toString()})'),
            Tab(text: 'Offline(${offDeviceList.length.toString()})'),
          ],
          onTap: (tabValue) {
            debugPrint("切换的tab:$tabValue");
            if (tabValue == 0) {
              getDeviceListFn();
            } else {
              getOffLineListFn();
            }
          },
        ),
      ),
      body: loading
          ? const Center(
              child: SizedBox(
                height: 80,
                width: 80,
                child: WaterLoading(
                  color: Color.fromARGB(255, 65, 167, 251),
                ),
              ),
            )
          : TabBarView(
              controller: _tabController,
              children: const [
                OnlinePage(),
                OfflinePage(),
              ],
            ),
    );
  }
}

class OnlinePage extends StatelessWidget {
  const OnlinePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Expanded(
          child: SingleChildScrollView(
              child: SizedBox(
            height: 1.sh - 70,
            child: ListView.builder(
              itemCount: deviceList.length,
              itemBuilder: (context, index) {
                return GestureDetector(
                  onTap: () {
                    Get.toNamed("/access_equipment", arguments: {
                      "deviceItemModel": topoData.onlineDeviceTable![index]
                    });
                  },
                  child: Card(
                    clipBehavior: Clip.hardEdge,
                    elevation: 2, //设置卡片阴影的深度
                    margin: const EdgeInsets.only(top: 10,left: 10,right: 10),
                    shape: const RoundedRectangleBorder(
                      //设置卡片圆角
                      borderRadius: BorderRadius.all(Radius.circular(8)),
                    ),
                    child: SizedBox(
                      height: 90,
                      child: ListTile(
                          //图片
                          leading: ClipOval(
                              child: Image.asset('assets/images/slices.png',
                                  fit: BoxFit.fitWidth, width: 90.w)),
                          //中间文字
                          title: Row(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: [
                              Expanded(
                                child: Text(
                                  (deviceList[index]['name'] == "" ||
                                          deviceList[index]['name'] == "*")
                                      ? "Unknow Device"
                                      : deviceList[index]['name'],
                                  overflow: TextOverflow.ellipsis,
                                  maxLines: 1,
                                ),
                              ),
                              // icon
                              IconButton(
                                  onPressed: () {},
                                  icon: deviceList[index]['connection'] == 'LAN'
                                      ? const Icon(
                                          Icons.lan,
                                          color: Color.fromRGBO(
                                              120, 199, 197, 1.0),
                                        )
                                      : const Icon(
                                          Icons.wifi,
                                          color: Color.fromRGBO(
                                              120, 199, 197, 1.0),
                                        ))
                            ],
                          ),
                          //title下方显示的内容
                          subtitle: Row(
                            children: [
                              Text(
                                deviceList[index].containsKey('connection')
                                    ? '${deviceList[index]['connection']}   Wi-Fi'
                                    : 'LAN',
                              ),
                            ],
                          )),
                    ),
                  ),
                );
              },
            ),
          )),
        ),
      ],
    );
  }
}

class OfflinePage extends StatelessWidget {
  const OfflinePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Expanded(
          child: SingleChildScrollView(
              child: SizedBox(
            height: 1.sh - 70,
            child: ListView.builder(
              itemCount: offDeviceList.length,
              itemBuilder: (context, index) {
                return GestureDetector(
                  onTap: () {
                    Get.toNamed("/access_equipment", arguments: {
                      "deviceItemModel": OfflineData.onlineDeviceTable![index]
                    });
                  },
                  child: Card(
                    clipBehavior: Clip.hardEdge,
                    elevation: 1, //设置卡片阴影的深度
                    margin: const EdgeInsets.only(top: 10,left: 10,right: 10),
                    shape: const RoundedRectangleBorder(
                      //设置卡片圆角
                      borderRadius: BorderRadius.all(Radius.circular(8)),
                    ),
                    child: SizedBox(
                      height: 60,
                      child: ListTile(
                        //图片
                        leading: ClipOval(
                            child: Image.asset('assets/images/slices.png',
                                fit: BoxFit.fitWidth, width: 90.w)),
                        //中间文字
                        title: Row(
                          mainAxisAlignment: MainAxisAlignment.start,
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            Expanded(
                              child: //显示的文字
                                  Text(
                                (offDeviceList[index].name! == "" ||
                                        offDeviceList[index].name! == "*")
                                    ? "Unknow Device"
                                    : offDeviceList[index].name!,
                                style: const TextStyle(color: Colors.grey),
                                overflow: TextOverflow.ellipsis,
                                maxLines: 1,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                );
              },
            ),
          )),
        ),
      ],
    );
  }
}
